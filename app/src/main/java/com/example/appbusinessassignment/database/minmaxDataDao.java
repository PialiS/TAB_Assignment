package com.example.appbusinessassignment.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.appbusinessassignment.database.minmaxData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MINMAX_DATA".
*/
public class minmaxDataDao extends AbstractDao<minmaxData, Void> {

    public static final String TABLENAME = "MINMAX_DATA";

    /**
     * Properties of entity minmaxData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MinPrice = new Property(0, Double.class, "minPrice", false, "MIN_PRICE");
        public final static Property MaxPrice = new Property(1, Double.class, "maxPrice", false, "MAX_PRICE");
    };


    public minmaxDataDao(DaoConfig config) {
        super(config);
    }
    
    public minmaxDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MINMAX_DATA\" (" + //
                "\"MIN_PRICE\" REAL," + // 0: minPrice
                "\"MAX_PRICE\" REAL);"); // 1: maxPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MINMAX_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, minmaxData entity) {
        stmt.clearBindings();
 
        Double minPrice = entity.getMinPrice();
        if (minPrice != null) {
            stmt.bindDouble(1, minPrice);
        }
 
        Double maxPrice = entity.getMaxPrice();
        if (maxPrice != null) {
            stmt.bindDouble(2, maxPrice);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public minmaxData readEntity(Cursor cursor, int offset) {
        minmaxData entity = new minmaxData( //
            cursor.isNull(offset + 0) ? null : cursor.getDouble(offset + 0), // minPrice
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1) // maxPrice
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, minmaxData entity, int offset) {
        entity.setMinPrice(cursor.isNull(offset + 0) ? null : cursor.getDouble(offset + 0));
        entity.setMaxPrice(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(minmaxData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(minmaxData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
